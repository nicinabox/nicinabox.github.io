@import 'functions/convert_number_to_word';
@import 'functions/grid_calc';

.row { width: $row_width; max-width: 100%; min-width: $screen_small; margin: 0 auto;
  .row { width: auto; max-width: none; min-width: 0; margin: 0 (-($column_gutter/2)); }

  &.collapse {
    .column, .columns { padding: 0; }
  }
  .row { width: auto; max-width: none; min-width: 0; margin: 0 (-($column_gutter/2));
    &.collapse { margin: 0; }
  }
}

.column, .columns { float: $default_float; min-height: 1px; padding: 0 ($column_gutter/2); position: relative;
  &.centered { float: none; margin: 0 auto; }
}

[class*="column"] + [class*="column"]:last-child { float: $default_opposite; }
[class*="column"] + [class*="column"].end { float: $default_float; }

// Creating column classes
@for $i from 1 through $total_columns {
  .#{convert-number-to-word($i)} { width: gridCalc($i, $total_columns); }
}

// Creating .row-# classes
@for $i from 1 through $total_columns {
  .row {
    .#{convert-number-to-word($i)} { @extend .#{convert-number-to-word($i)}; }
  }
}

// Creating .row .offset-by-# classes
@for $i from 1 through $total_columns - 2 {
  .row {
    .offset-by-#{convert-number-to-word($i)} { margin-#{$default_float}: gridCalc($i, $total_columns); }
  }
}

// Creating .row .push-# classes
@for $i from 2 through $total_columns - 2 {
  .push-#{convert-number-to-word($i)} { #{$default_float}: gridCalc($i, $total_columns); }
  .pull-#{convert-number-to-word($i)} { #{$default_opposite}: gridCalc($i, $total_columns); }
}

img { height: auto; }
img, object, embed { max-width: 100%; }
img { -ms-interpolation-mode: bicubic; }
#map_canvas img, .map_canvas img {max-width: none!important;}

/* Nicolas Gallagher's micro clearfix */
.row { @include clearfix(); }

/* Block Grids ---------------------- */

/* These are 2-up, 3-up, 4-up and 5-up ULs, suited
for repeating blocks of content. Add 'mobile' to
them to switch them just like the layout grid
(one item per line) on phones

For IE7/8 compatibility block-grid items need to be
the same height. You can optionally uncomment the
lines below to support arbitrary height, but know
that IE7/8 do not support :nth-child.
-------------------------------------------------- */

.block-grid { display: block; overflow: hidden; padding: 0;

  &>li { display: block; height: auto; float: $default_float; }

  @for $i from 1 through $block_grid_elements {
    &.#{convert-number-to-word($i)}-up {
      @if $i == 1 { margin: 0; }
      @else if $i == 2 { margin: 0 -15px; }
      @else if $i == 3 { margin: 0 -12px; }
      @else if $i == 4 { margin: 0 -10px; }
      @else { margin: 0 -8px; }
      &>li {
        width: 100%/$i;
        @if $i == 1 { padding: 0 0 15px; }
        @else if $i == 2 { padding: 0 15px 15px; }
        @else if $i == 3 { padding: 0 12px 12px; }
        @else if $i == 4 { padding: 0 10px 10px; }
        @else { padding: 0 8px 8px; }
        @if $i > 1 { &:nth-child(#{$i}n+1) { clear: both; } }
      }
    }
  }
}

@media #{$small} {
  .left, .right { float: none; }
  body { -webkit-text-size-adjust: none; -ms-text-size-adjust: none; width: 100%; min-width: 0; margin-#{$default_float}: 0; margin-#{$default_opposite}: 0; padding-#{$default_float}: 0; padding-#{$default_opposite}: 0; }

  .row { width: auto; min-width: 0; margin-#{$default_float}: 0; margin-#{$default_opposite}: 0; }
  .column, .columns { width: auto !important; float: none;  }
  .column:last-child, .columns:last-child { float: none; }
  [class*="column"] + [class*="column"]:last-child { float: none; }
  .column:before, .columns:before, .column:after, .columns:after { content:""; display:table; }
  .column:after, .columns:after { clear: both; }

  // Placeholder classes for mobile grid overrides
  %no-default-margin { margin-#{$default_float}: 0 !important; }
  %default-auto { #{$default_float}: auto; }
  %opposite-auto { #{$default_opposite}: auto; }

  @for $i from 1 through $total_columns - 2 {
    .offset-by-#{convert-number-to-word($i)} { @extend %no-default-margin; }
  }
  @for $i from 2 through $total_columns - 2 {
    .push-#{convert-number-to-word($i)} { @extend %default-auto; }
    .pull-#{convert-number-to-word($i)} { @extend %opposite-auto; }
  }

  /* Mobile 4-column Grid */
  @for $i from 1 through $mobile_total_columns {
    .row {
      .mobile-#{convert-number-to-word($i)} { width: gridCalc($i, $mobile_total_columns) !important; float: $default_float; padding: 0 ($column_gutter/2);
        &:last-child { float: $default_opposite; }
        &.end { float: $default_float; }
      }
      &.collapse {
        .mobile-#{convert-number-to-word($i)} { padding: 0; }
      }
    }
  }
  @for $i from 1 through $mobile_total_columns - 1 {
    .push-#{convert-number-to-word($i)}-mobile { #{$default_float}: gridCalc($i, $mobile_total_columns); }
    .pull-#{convert-number-to-word($i)}-mobile { #{$default_opposite}: gridCalc($i, $mobile_total_columns); }
  }

  /* Block Grids --- */
  /*                 */
  .block-grid.mobile {
    &>li { float: none; width: 100%; margin-#{$default_float}: 0; }
  }

  .block-grid {
    &>li { clear: none; }
    @for $i from 1 through $block_grid_elements {
      &.mobile-#{convert-number-to-word($i)}-up>li {
        width: 100%/$i;
        @if $i > 1 { &:nth-child(#{$i}n+1) { clear: both; } }
      }
    }
  }
}
